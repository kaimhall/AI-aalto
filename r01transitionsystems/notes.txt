def deadend(self, x, y):
        if self.d == "N":
            if (
                self.grid.occupied(y + 1, x)
                and self.grid.occupied(y, x + 1)
                and self.grid.occupied(y, x - 1)
            ):
                state = PacManState(x, y - 1, "S", self.grid)
                hash = state.__hash__()
                return hash, state
        elif self.d == "S":
            if (
                self.grid.occupied(y - 1, x)
                and self.grid.occupied(y, x + 1)
                and self.grid.occupied(y, x - 1)
            ):
                state = PacManState(x, y + 1, "N", self.grid)
                hash = state.__hash__()
                return hash, state
        elif self.d == "E":
            if (
                self.grid.occupied(y, x + 1)
                and self.grid.occupied(y + 1, x)
                and self.grid.occupied(y - 1, x)
            ):
                state = PacManState(x - 1, y, "W", self.grid)
                hash = state.__hash__()
                return hash, state
        elif self.d == "W":
            if (
                self.grid.occupied(y, x - 1)
                and self.grid.occupied(y + 1, x)
                and self.grid.occupied(y - 1, x)
            ):
                state = PacManState(x + 1, y, "E", self.grid)
                hash = state.__hash__()
                return hash, state
        else:
            return False

# if not grid.occupied(x, y - 1):
                    #     s = self.moveSouth(x, y)
                    #     if not any(j == s[1] for (i, j) in successor_states):
                    #         successor_states.append(s)
                    # dead = n[1].deadend(x, y)
                    # if dead and not any(j == dead[1] for (i, j) in successor_states):
                    #     successor_states.append((dead))

 if not any(j == s[1] for (i, j) in successor_states):